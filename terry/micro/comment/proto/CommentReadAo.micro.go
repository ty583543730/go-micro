// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: CommentReadAo.proto

package terry_proto_comment

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CommentReadAo service

type CommentReadAoService interface {
	GetCommentInfo(ctx context.Context, in *GetCommentRequest, opts ...client.CallOption) (*GetCommentResponse, error)
}

type commentReadAoService struct {
	c    client.Client
	name string
}

func NewCommentReadAoService(name string, c client.Client) CommentReadAoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "terry.proto.comment"
	}
	return &commentReadAoService{
		c:    c,
		name: name,
	}
}

func (c *commentReadAoService) GetCommentInfo(ctx context.Context, in *GetCommentRequest, opts ...client.CallOption) (*GetCommentResponse, error) {
	req := c.c.NewRequest(c.name, "CommentReadAo.GetCommentInfo", in)
	out := new(GetCommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommentReadAo service

type CommentReadAoHandler interface {
	GetCommentInfo(context.Context, *GetCommentRequest, *GetCommentResponse) error
}

func RegisterCommentReadAoHandler(s server.Server, hdlr CommentReadAoHandler, opts ...server.HandlerOption) error {
	type commentReadAo interface {
		GetCommentInfo(ctx context.Context, in *GetCommentRequest, out *GetCommentResponse) error
	}
	type CommentReadAo struct {
		commentReadAo
	}
	h := &commentReadAoHandler{hdlr}
	return s.Handle(s.NewHandler(&CommentReadAo{h}, opts...))
}

type commentReadAoHandler struct {
	CommentReadAoHandler
}

func (h *commentReadAoHandler) GetCommentInfo(ctx context.Context, in *GetCommentRequest, out *GetCommentResponse) error {
	return h.CommentReadAoHandler.GetCommentInfo(ctx, in, out)
}
